LB=0
size = 4
my_stack=[None] * size
top = LB-1


class Stack:
    """
    This class implements a stack data structure with push, pop, delete,
    size, and display functionality, while avoiding the use of specific built-in functions.
    """
    def __init__(self, max_size):
        """
        Initializes an empty stack with a user-defined maximum size.
        """
        if max_size <= 0:
            raise ValueError("Stack size must be a positive integer")
        self.max_size = max_size
        self.items = [None] * max_size  # Pre-allocate space for all items

        self.top = -1  # Initialize top to -1 (empty stack)

    # def push(self, item):
    #     """
    #     Pushes an item onto the top of the stack. Raises an IndexError if full.
    #     Prints the pushed item and all existing stack contents (top to bottom) after pushing.
    #     """
    #     if self.top == self.max_size - 1:
    #         print("Stack overflow! Cannot push", item)
    #     else:
    #         self.top += 1
    #         self.items[self.top] = item
    #         print("Pushed:", item)

    #     # Print all items after pushing (top to bottom)
    #     print(".........Stack contents Top to Bottom :")
    #     for i in range(self.top, -1, -1):
    #         print(self.items[i])
    def push(item):
        global   LB,my_stack,top,size 
        if top==size +LB-1:
            print("Stack is full")
            return top
        top+=1
        my_stack[top]=item
        return my_stack

    def pop():
        global my_stack ,LB,top
        if top==LB-1:
            print("Stack is empty")
            return top
        
        item=my_stack[top]
        top-=1
        return item,my_stack,top

    # def pop(self):
    #     """
    #     Pops and returns the top item from the stack. Raises an IndexError if empty.
    #     Prints the popped item and all remaining stack contents (top to bottom) after popping.
    #     """
    #     if self.is_empty():
    #         raise IndexError("Stack underflow")
    #     popped_item = self.items[self.top]
    #     self.items[self.top] = None
    #     self.top -= 1
    #     print("Popped:", popped_item)

    #     # Print all items after popping (top to bottom)
    #     print("............Stack contents Top to bottom:")
    #     for i in range(self.top, -1, -1):
    #         print(self.items[i])

    #     return popped_item

    def delete(self, item):
        """
        Deletes the first occurrence of a specific item from the stack.
        Shifts subsequent items down. Prints all items after deletion.
        """
        found = False
        for i in range(self.top, -1, -1):  # Iterate from top to bottom
            if self.items[i] == item:
                found = True
                self.items[i] = None
                # Shift remaining items down (manual shifting)
                for j in range(i, self.top):
                    self.items[j] = self.items[j + 1]
                self.top -= 1
                print("Deleted:", item)

                # Print all items after deletion (top to bottom)
                print("...........Stack contents Top to bottom:")
                for i in range(self.top, -1, -1):
                    print(self.items[i])
                break

        if not found:
            print(f"Item {item} not found in the stack")
            
            
    # def is_empty(self):
    #     """
    #     Returns True if the stack is empty, False otherwise.
    #     """
    #     return self.top == -1

    # def size(self):
    #     """
    #     Returns the current size of the stack.
    #     """
    #     return self.top + 1

    # def display(self):
    #     """
    #     Prints the current contents of the stack (top to bottom).
    #     """
    #     if self.is_empty():
    #         print("Stack is empty")
    #     else:
    #         print("Stack contents (top to bottom):")
    #         for i in range(self.top, -1, -1):
    #             print(self.items[i])

